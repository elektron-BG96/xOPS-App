<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>
The app calculates how many operations (load number, add, subtract, multiply, divide, compare) a CPU can perform in a given second with either fractional (floating-point) or integer numbers:

    • FLOPS - Floating-point Operations Per Second, performance measurement of Floating Point Unit (FPU). 
    • INOPS - Integer Operations Per Second, measurement of Arithmetic logic unit (ALU)
    
E.g. 1 GigaFLOPS means that CPU can do 1 billion floating-point operations per second (such as 1.1+2.2=3.3).
    
These operations are essentially what CPUs do all the time while running apps. General app logic is typically reliant on integer operations, while graphics and games rely on floating-point ones. The faster your CPU can crunch numbers, the faster your apps can run.

Both FPU and ALU tests are executed in single and multithreaded modes and reflect both multi-core and single-core performance of the CPU . 

The tests are "isolated", meaning that they focus on creating CPU load only (and it's FPU and ALU) while trying to cross out interferences from other pieces of the system (such as memory, cache, storage, network, software optimizations etc.). There're many factors determining systems' performance and CPU although the major one  is not the only. While the app doesn’t give a single simple answer (or score) to the questions "How fast is the phone/laptop/PC?" (is it even possible?), it gives a comparable performance metric of one important piece of your device - the CPU.

The app is cross platform (supports Android/ChromeOS, Windows, macOS): LINKS
    </value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="CountdownMany" xml:space="preserve">
    <value>Starting in {0} seconds</value>
  </data>
  <data name="CountdownOne" xml:space="preserve">
    <value>Starting in 1 second </value>
  </data>
  <data name="Floating" xml:space="preserve">
    <value>Floating</value>
  </data>
  <data name="Integer" xml:space="preserve">
    <value>Integer</value>
  </data>
  <data name="ST" xml:space="preserve">
    <value>Single Threaded</value>
  </data>
  <data name="MT" xml:space="preserve">
    <value>Multi Threaded</value>
  </data>
  <data name="Break" xml:space="preserve">
    <value>¾ Break</value>
  </data>
  <data name="Retry" xml:space="preserve">
    <value>↻ Retry</value>
  </data>
  <data name="Share" xml:space="preserve">
    <value>↪ Share</value>
  </data>
  <data name="Running" xml:space="preserve">
    <value>Running...</value>
  </data>
  <data name="TestInterrupted" xml:space="preserve">
    <value>Test interrupted</value>
  </data>
  <data name="Precision" xml:space="preserve">
    <value>Precision</value>
  </data>
  <data name="ThreadsNumber" xml:space="preserve">
    <value>Threads Number</value>
  </data>
  <data name="Bit" xml:space="preserve">
    <value>Bit</value>
  </data>
  <data name="AveragesMany" xml:space="preserve">
    <value>Showing averages, {0} tests</value>
  </data>
  <data name="AveragesOne" xml:space="preserve">
    <value>1 test</value>
  </data>
</root>