<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>L'application calcule le nombre d'opérations (numéro de chargement, ajout, soustraction, multiplication, division, comparaison) qu'un processeur peut effectuer en une seconde donnée avec des nombres fractionnaires (virgule flottante) ou entiers:

• FLOPS - Opérations en virgule flottante par seconde, mesure des performances de l'unité en virgule flottante (FPU).
• INOPS - Opérations entières par seconde, mesure de l'unité logique arithmétique (ALU)

Par exemple. 1 GigaFLOPS signifie que le processeur peut effectuer 1 milliard d'opérations en virgule flottante par seconde (comme 1,1 + 2,2 = 3,3).

Ces opérations sont essentiellement ce que les CPU font tout le temps lors de l'exécution des applications. La logique générale des applications dépend généralement des opérations entières, tandis que les graphiques et les jeux reposent sur des opérations à virgule flottante. Plus votre processeur peut calculer des chiffres rapidement, plus vos applications peuvent s'exécuter rapidement.

Les tests FPU et ALU sont exécutés en modes simple et multithread et reflètent les performances multicœur et monocœur du CPU.

Les tests sont "isolés", ce qui signifie qu'ils se concentrent sur la création de charge CPU uniquement (et c'est FPU et ALU) tout en essayant de barrer les interférences provenant d'autres éléments du système (comme la mémoire, le cache, le stockage, le réseau, les optimisations logicielles, etc.). ). De nombreux facteurs déterminent les performances des systèmes et le processeur, bien que le principal ne soit pas le seul. Bien que l'application ne donne pas une seule réponse (ou score) simple aux questions "Quelle est la vitesse du téléphone / ordinateur portable / PC?" (est-ce même possible?), il donne une mesure de performance comparable d'une pièce importante de votre appareil - le CPU.

Vous pouvez en savoir plus sur les versions d'application et de téléchargement pour d'autres OS (Android / ChromeOS, Windows, macOS) en utilisant le lien:</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Fermer</value>
  </data>
  <data name="CountdownMany" xml:space="preserve">
    <value>À partir de {0} secondes</value>
  </data>
  <data name="CountdownOne" xml:space="preserve">
    <value>Démarrage dans 1 seconde</value>
  </data>
  <data name="Floating" xml:space="preserve">
    <value>Flottant</value>
  </data>
  <data name="Integer" xml:space="preserve">
    <value>Entier</value>
  </data>
  <data name="ST" xml:space="preserve">
    <value>Single Threaded</value>
  </data>
  <data name="MT" xml:space="preserve">
    <value>Multi Threaded</value>
  </data>
  <data name="Break" xml:space="preserve">
    <value>¾ Break</value>
  </data>
  <data name="Retry" xml:space="preserve">
    <value>↻ Répéter</value>
  </data>
  <data name="Share" xml:space="preserve">
    <value>↪ Partager</value>
  </data>
  <data name="Running" xml:space="preserve">
    <value>En cours d'exécution....</value>
  </data>
  <data name="TestInterrupted" xml:space="preserve">
    <value>Test interrompu</value>
  </data>
  <data name="Precision" xml:space="preserve">
    <value>Précision</value>
  </data>
  <data name="ThreadsNumber" xml:space="preserve">
    <value>Nombre de threads</value>
  </data>
  <data name="Bit" xml:space="preserve">
    <value>Bit</value>
  </data>
  <data name="AveragesMany" xml:space="preserve">
    <value>Affichage des moyennes, {0} tests</value>
  </data>
  <data name="AveragesOne" xml:space="preserve">
    <value>1 test</value>
  </data>
   <data name="Stress" xml:space="preserve">
    <value>≈ Stress</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>× Annuler</value>
  </data>
  <data name="Proceed" xml:space="preserve">
    <value>* Procéder</value>
  </data>
  <data name="Achtung" xml:space="preserve">
    <value>⚠️ ACHTUNG!</value>
  </data>
  <data name="StressWarning" xml:space="preserve">
    <value>Vous êtes sur le point de commencer un TEST DE STRESS. Cela crée une charge accrue sur le processeur, ce qui peut entraîner une surchauffe. Pendant le test, votre appareil peut se bloquer ou redémarrer.

Si le matériel est en mauvais état, il peut même être endommagé.
        
Procéder?</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>« Retour</value>
  </data>
  <data name="Stop" xml:space="preserve">
    <value>@ Arrêt</value>
  </data>
  <data name="threads" xml:space="preserve">
    <value>threads</value>
  </data>
  <data name="WarmingUp" xml:space="preserve">
    <value>Échauffement</value>
  </data>
  <data name="Start" xml:space="preserve">
    <value>Début</value>
  </data>
  <data name="Now" xml:space="preserve">
    <value>Maintenant</value>
  </data>
  <data name="End" xml:space="preserve">
    <value>Fin</value>
  </data>
  <data name="TempNotAvailable" xml:space="preserve">
    <value>Température non disponible</value>
  </data>
  <data name="First5Secs" xml:space="preserve">
    <value>5 premières secondes</value>
  </data>    
  <data name="Last5Secs" xml:space="preserve">
    <value>5 dernières secondes</value>
  </data>  
</root>